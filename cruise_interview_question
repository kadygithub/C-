#we have a matrix , we want to find a trace of connected elements and return the index of them
# we first defin a matrix (2d array : int example[6][6])
# we then create a map matrix with the same size to mark the visited indexes
#then we start from the start point as given and push it in to a queue and evaluate its 4 neighbors, 
#and if they qualify(have the same value as the start point and not visited before), we push thenm into the queue,
#mark thier index visited and add them to the result vector
# we continue this process untill queue is empty.
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<queue>

using namespace std;
int example[6][6]={
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,0,0,0,0},
    {0,0,0,0,0,0},
    
};
vector<pair<int,int>> findconnections(int example[6][6],pair <int,int> start,int rmax,int cmax)
{
    int visited_map[6][6]={{0}};
    vector<pair<int,int>> result;
    queue<pair<int,int>> q;
    q.push(start);
    result.push_back(start);
    
   while(!q.empty())
    {
        pair<int,int> current=q.front();
        q.pop();
        visited_map[start.first][start.second]=1;
        
    for (int i=current.first;i<rmax;i++)
    {
        for (int j=current.second;j<cmax;j++)
        {
            if (example[i][j+1]==1 && example[i][j] && visited_map[i][j+1]==0)
            {
                
                q.push(pair<int,int>(i,j+1));
                visited_map[i][j+1]=1;
                result.push_back(pair<int,int>(i,j+1));
                
                
            }
            if (example[i][j-1]==1 && example[i][j] && visited_map[i][j-1]==0)
            {
                q.push(pair<int,int>(i,j-1));
                visited_map[i][j-1]=1;
                result.push_back(pair<int,int>(i,j-1));
            }
            if (example[i+1][j]==1 && example[i][j] && visited_map[i+1][j]==0)
            {
                q.push(pair<int,int>(i+1,j));
                visited_map[i+1][j]=1;
                result.push_back(pair<int,int>(i+1,j));
            }
            if (example[i-1][j]==1 && example[i][j] && visited_map[i][j]==0)
            {
                q.push(pair<int,int>(i-1,j));
                visited_map[i-1][j]=1;
                result.push_back(pair<int,int>(i-1,j));
            }
        }
    }
    
    
    }
    
    
   return result; 
    
}
int main()
{
    cout<<"Hello World";
    vector<pair<int,int>> r;
    r=findconnections(example,pair<int,int>(2,2),6,6);
    for (vector<pair<int,int>>::const_iterator it = r.begin(); it!=r.end(); it++)
    {
    cout <<"{"<<it->first<<","<<it->second<<"}"<< endl;
    }
    return 0;
}
